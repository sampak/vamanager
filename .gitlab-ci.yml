# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages: # List of stages for jobs, and their order of execution
  - build
  - deploy

frontend-build: # This job runs in the build stage, which runs first.
  image: node:18-alpine3.14
  stage: build
  script:
    - echo "Compiling the code..."
    - npm install
    - cd frontend
    - npm install --force
    - CI=false npx craco build
    - echo "Compile frontend complete."

backend-build: # This job runs in the build stage, which runs first.
  image: node:18-alpine3.14
  stage: build
  script:
    - echo "Compiling the code..."
    - npm install
    - cd backend
    - npm install
    - npm run build
    - echo "Compile backend complete."

backend-deploy:
  image: docker:latest
  stage: deploy
  when: manual
  only:
    - master
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:latest
